[{"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\index.js":"1","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\reportWebVitals.js":"2","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\App.js":"3","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\contexts\\StockInfoContext.js":"4","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\firebase\\userContext.js":"5","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\search\\index.js":"6","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\summary\\index.js":"7","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\login\\index.js":"8","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\portfolio\\index.js":"9","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\reducers\\stockInfoReducer.js":"10","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\firebase\\index.js":"11","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\themes\\theme.js":"12","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\StockInfo\\index.js":"13","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\nav\\index.js":"14","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\PortfolioTable\\index.js":"15","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\loginform\\index.js":"16","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\utilities\\StringFormatter.js":"17"},{"size":517,"mtime":1610132111107,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1610132111109,"results":"20","hashOfConfig":"19"},{"size":1175,"mtime":1610466402011,"results":"21","hashOfConfig":"19"},{"size":604,"mtime":1610378499753,"results":"22","hashOfConfig":"19"},{"size":557,"mtime":1610466402013,"results":"23","hashOfConfig":"19"},{"size":1295,"mtime":1610466402084,"results":"24","hashOfConfig":"19"},{"size":333,"mtime":1610466402021,"results":"25","hashOfConfig":"19"},{"size":273,"mtime":1610466402017,"results":"26","hashOfConfig":"19"},{"size":443,"mtime":1610466402018,"results":"27","hashOfConfig":"19"},{"size":793,"mtime":1610378499755,"results":"28","hashOfConfig":"19"},{"size":503,"mtime":1610466402013,"results":"29","hashOfConfig":"19"},{"size":351,"mtime":1610466402021,"results":"30","hashOfConfig":"19"},{"size":3828,"mtime":1610381790450,"results":"31","hashOfConfig":"19"},{"size":1099,"mtime":1610466402016,"results":"32","hashOfConfig":"19"},{"size":18154,"mtime":1610466402012,"results":"33","hashOfConfig":"19"},{"size":4578,"mtime":1610466402015,"results":"34","hashOfConfig":"19"},{"size":279,"mtime":1610466402022,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1eh8kby",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\index.js",[],["77","78"],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\App.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\contexts\\StockInfoContext.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\firebase\\userContext.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\search\\index.js",["79"],"import React, { useContext } from 'react'\r\nimport Search from \"../../components/Search\"\r\nimport Nav from '../../components/nav'\r\nimport StockInfo from \"../../components/StockInfo\"\r\nimport { StockInfoContext } from '../../contexts/StockInfoContext'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport theme from \"../../themes/theme\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   loader: {\r\n        color:\"rgba(21,244,238)\",\r\n        margin: \"30px\"\r\n    }\r\n}));\r\n\r\n\r\nexport default function SearchPage() {\r\n    const classes = useStyles();\r\n    const [stockInfo, dispatchStockInfo] = useContext(StockInfoContext)\r\n  \r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={theme}> \r\n            <Nav />\r\n            \r\n            <Search />\r\n            {stockInfo.isLoading ?\r\n\r\n                <Grid container justify=\"center\">\r\n                    <Grid item>\r\n                        <CircularProgress size={50} className={classes.loader}/>\r\n                    </Grid>\r\n                </Grid>\r\n                :\r\n                <StockInfo />\r\n            }\r\n</ThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\summary\\index.js",["80"],"import React from 'react'\r\nimport Summary from \"../../components/PortfolioTable\"\r\nimport Nav from '../../components/nav'\r\nimport PortfolioTable from '../../components/PortfolioTable'\r\n\r\nexport default function SummaryPage() {\r\n    return (\r\n        <div>\r\n            <Nav />\r\n            <PortfolioTable />\r\n        </div>\r\n    )\r\n}","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\login\\index.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\pages\\portfolio\\index.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\reducers\\stockInfoReducer.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\firebase\\index.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\themes\\theme.js",["81","82"],"import { createMuiTheme } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n      type: \"dark\",\r\n      background: \"rgb(10,10,10)\",\r\n      divider:\"rgba(10, 150, 100, 0.2)\"\r\n  },\r\n});\r\n\r\nexport default theme","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\StockInfo\\index.js",["83","84"],"import React, { useState, useContext } from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { StockInfoContext } from '../../contexts/StockInfoContext'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    darkCardBackground:{\r\n        backgroundColor:\"rgb(50,50,50)\"\r\n    }\r\n}));\r\n\r\nexport default function StockInfo() {    \r\n    const classes = useStyles();\r\n    const [stockInfo, dispatchStockInfo] = useContext(StockInfoContext)\r\n    return (\r\n        <Box m={3}>\r\n\r\n            <Grid container spacing={4}>\r\n                <Grid item sm={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography>\r\n                                Stock Chart\r\n                    </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item container spacing={3} justify=\"center\" alignItems=\"stretch\" sm={12}>\r\n\r\n                    <Grid item sm={6} >\r\n                        <Card className={classes.darkCardBackground}>\r\n\r\n\r\n\r\n                            {stockInfo.targetPrice ?\r\n                                <Grid container spacing ={3}>\r\n                                    <Grid item>\r\n                                    <Card>\r\n                                        <CardContent>\r\n                                        {`Last Updated: ${stockInfo.targetPrice.lastUpdated}`}\r\n                                        </CardContent>\r\n                                    </Card>\r\n\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                    <Card>\r\n                                    <CardContent>\r\n                                        {`symbol: ${stockInfo.targetPrice.symbol}`}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                    <Card>\r\n                                    <CardContent>\r\n                                        {`Target High: ${stockInfo.targetPrice.targetHigh}`}\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                    <Card>\r\n                                    <CardContent>\r\n                                        {`Target Low: ${stockInfo.targetPrice.targetLow}`}\r\n                                        </CardContent>\r\n                                    </Card>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                : <Typography>\"No Description Available\"</Typography>}\r\n\r\n\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item sm={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography>\r\n                                    {/* if there is stock info and a stock summary then show the stock summary description */}\r\n\r\n                                    {stockInfo.stockSummary.Description ? stockInfo.stockSummary.Description : \"No Description Available\"}\r\n\r\n                                </Typography>\r\n                            </CardContent>\r\n\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\nav\\index.js",["85"],"import React from \"react\"\r\n\r\n\r\nexport default function Nav() {\r\n\r\n  function triggerDropDown() {\r\n\r\n  }\r\n\r\n  return(\r\n    <nav>\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"/\" className=\"brand-logo blueText\" id = \"portfolio\">Portfolio</a>\r\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n        <li><a href=\"/summary\">Summary</a></li>\r\n        <li><a href=\"/search\">Search</a></li>\r\n        <li><a href=\"/portfolio\">My portfolio</a></li>\r\n        <li className = \"dropdown-trigger\" data-target=\"dropdown1\" id = \"userInfo\">\r\n            {/* <img id = \"userAvatar\" className = \"circle\" src =\"\" alt = \"\"/>  */}\r\n            <div id = \"userAvatar\" className = \"circle\" onClick= {triggerDropDown} ></div>\r\n            John Smith\r\n            <ul>\r\n              <li id = \"logout\" display = \"none\"> <a href = \"/\"></a>Log Out</li>\r\n            </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\n// function SignOut() {\r\n//   return auth.currentUser && (\r\n//     <Link to=\"/loggedout\"><a className=\"sign-out\" onClick={() => auth.signOut()}>Logout</a></Link>\r\n//   )","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\PortfolioTable\\index.js",["86"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { useForm } from 'react-hook-form';\r\nimport { removeHyphenAddDot } from \"../../utilities/StringFormatter\"\r\n\r\nfunction createData(name, symbol, dateAdded, prevSharePrice, currSharePrice, change) {\r\n    let percentChange = (change / prevSharePrice) * 100\r\n    percentChange = (Math.round(percentChange * 100) / 100).toFixed(2);\r\n    return { name, symbol, dateAdded, prevSharePrice, currSharePrice, change, percentChange };\r\n}\r\n\r\nconst rows = [\r\n    createData(\"Royal Dutch Shell\", \"RDS-B\", \"1/01/2020\", 38.70, 38.17, -0.53),\r\n    createData(\"British American Tobacco\", \"BTI\", \"1/03/2020\", 37.50, 37.70, 0.20),\r\n    createData('Apple', \"AAPL\", \"1/05/2020\", 125.00, 129.85, 4.85),\r\n    createData('Apple2', \"APL\", \"1/05/2020\", 125.00, 129.85, 4.85),\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n// company, symbol, dateAdded, prevSharePrice, currSharePrice, change\r\nconst headCells = [\r\n    { id: 'name', numeric: false, disablePadding: true, label: 'Company' },\r\n    { id: 'symbol', numeric: true, disablePadding: false, label: 'Symbol' },\r\n    { id: 'dateAdded', numeric: true, disablePadding: false, label: 'Date Added' },\r\n    { id: 'prevSharePrice', numeric: true, disablePadding: false, label: 'Previous Price (USD)' },\r\n    { id: 'currSharePrice', numeric: true, disablePadding: false, label: 'Current Price (USD)' },\r\n    { id: 'change', numeric: true, disablePadding: false, label: 'Change (USD)' },\r\n    { id: 'percentChange', numeric: true, disablePadding: false, label: 'Percent Change (%)' }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'Select All Stocksj' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                    <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                        Portfolio\r\n                    </Typography>\r\n                )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\" type=\"submit\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                    <Tooltip title=\"Filter list\">\r\n                        <IconButton aria-label=\"filter list\">\r\n                            <FilterListIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                )}\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        color: \"white\",\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        color: \"white\",\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    tableRow: {\r\n\r\n    },\r\n    tableCellPositive: {\r\n       \r\n        color: \"rgb(57,255,20)\"\r\n    },\r\n\r\n    tableCellNegative: {\r\n        color: \"rgb(255, 7, 58)\"\r\n    },\r\n\r\n    boxNegative:{\r\n        backgroundColor:\"rgba(130,120,120, 0.20)\",\r\n         display:\"inline-block\", \r\n         borderRadius:\"2px\", \r\n         padding:\"0.2rem 0.8rem\"\r\n    },\r\n\r\n    boxPositive:{\r\n        backgroundColor:\"rgba(130,130,130, 0.20)\",\r\n         display:\"inline-block\", \r\n         borderRadius:\"2px\", \r\n         padding:\"0.2rem 0.8rem\"\r\n    },\r\n\r\n    boxNeutral:{\r\n        backgroundColor:\"rgba(100,100,100, 0.2)\",\r\n         display:\"inline-block\", \r\n         borderRadius:\"2px\", \r\n         padding:\"0.2rem 0.8rem\"\r\n    },\r\n\r\n\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nexport default function PortfolioTable() {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    //Code needed for react hook form\r\n    const { handleSubmit, register } = useForm();\r\n    const onSubmit = handleSubmit((data) => {\r\n        // data.filter((obj)=>{\r\n        //     obj.value === false\r\n        // })\r\n        let symbolsForDeleting = []\r\n        Object.keys(data).forEach(key => {\r\n            if (data[key] === true) {\r\n                symbolsForDeleting.push(key)\r\n            };\r\n        });\r\n        symbolsForDeleting = removeHyphenAddDot(symbolsForDeleting)\r\n        console.log(symbolsForDeleting)\r\n        console.log(data)\r\n    });\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.name);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    //conditional logic to render the color of the text\r\n    const renderTextColor = (value) =>{\r\n        if (value>0){\r\n            return classes.tableCellPositive\r\n        }else if(value<0){\r\n            return classes.tableCellNegative\r\n        }else{\r\n            return \r\n        }\r\n    }\r\n\r\n    const renderBoxColor =(value)=>{\r\n        if (value>0){\r\n            return classes.boxPositive\r\n        }else if(value<0){\r\n            return classes.boxNegative\r\n        }else{\r\n            return classes.boxNeutral\r\n        }\r\n    }\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <form onSubmit={onSubmit}>\r\n                <Paper className={classes.paper}>\r\n                    <EnhancedTableToolbar numSelected={selected.length} />\r\n                    <TableContainer>\r\n                        <Table\r\n                            className={classes.table}\r\n                            aria-labelledby=\"tableTitle\"\r\n                            size={dense ? 'small' : 'medium'}\r\n                            aria-label=\"enhanced table\"\r\n                        >\r\n                            <EnhancedTableHead\r\n                                classes={classes}\r\n                                numSelected={selected.length}\r\n                                order={order}\r\n                                orderBy={orderBy}\r\n                                onSelectAllClick={handleSelectAllClick}\r\n                                onRequestSort={handleRequestSort}\r\n                                rowCount={rows.length}\r\n                            />\r\n                            <TableBody>\r\n                                {stableSort(rows, getComparator(order, orderBy))\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, index) => {\r\n                                        const isItemSelected = isSelected(row.symbol);\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                        return (\r\n                                            <TableRow\r\n                                                hover\r\n                                                onClick={(event) => handleClick(event, row.symbol)}\r\n                                                role=\"checkbox\"\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={row.symbol}\r\n                                                selected={isItemSelected}\r\n                                                className={classes.tableRow}\r\n\r\n                                            >\r\n                                                <TableCell padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        checked={isItemSelected}\r\n                                                        inputProps={{ 'aria-labelledby': labelId }}\r\n                                                        //fields needed for react hook form\r\n                                                        name={row.symbol}\r\n                                                        inputRef={register}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                    {row.name}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{row.symbol}</TableCell>\r\n                                                <TableCell align=\"right\">{row.dateAdded}</TableCell>\r\n                                                <TableCell align=\"right\">{row.prevSharePrice}</TableCell>\r\n                                                <TableCell align=\"right\"\r\n                                                 className={row.currSharePrice < row.prevSharePrice ? classes.tableCellNegative : classes.tableCellPositive}\r\n                                                >\r\n                                                       <Box className={renderBoxColor(row.percentChange)}>\r\n\r\n                                                    {row.currSharePrice}\r\n                                                       </Box>\r\n                                                       </TableCell>\r\n                                                <TableCell \r\n                                                className={renderTextColor(row.change)}\r\n                                                align=\"right\">\r\n                                                     <Box className={renderBoxColor(row.percentChange)}>\r\n                                                     {row.change}\r\n                                                     </Box>\r\n                                                   </TableCell>\r\n                                                <TableCell\r\n                                                    className={renderTextColor(row.percentChange)}\r\n                                                    align=\"right\">\r\n                                                        <Box className={renderBoxColor(row.percentChange)}>\r\n                                                    {row.percentChange < 0 ? `${row.percentChange}` : `+${row.percentChange}`}\r\n\r\n                                                        </Box>\r\n\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                {emptyRows > 0 && (\r\n                                    <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                        <TableCell colSpan={8} />\r\n                                    </TableRow>\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={rows.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </form>\r\n        </div>\r\n    );\r\n}","C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\components\\loginform\\index.js",[],"C:\\Users\\isaacrez\\Documents\\NetBeansProjects\\FinancialApp\\client\\src\\utilities\\StringFormatter.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":22,"column":23,"nodeType":"93","messageId":"94","endLine":22,"endColumn":40},{"ruleId":"91","severity":1,"message":"95","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":15},{"ruleId":"91","severity":1,"message":"96","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":13},{"ruleId":"91","severity":1,"message":"98","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":18,"column":23,"nodeType":"93","messageId":"94","endLine":18,"endColumn":40},{"ruleId":"99","severity":1,"message":"100","line":23,"column":51,"nodeType":"101","endLine":23,"endColumn":65},{"ruleId":"91","severity":1,"message":"102","line":319,"column":11,"nodeType":"93","messageId":"94","endLine":319,"endColumn":28},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'dispatchStockInfo' is assigned a value but never used.","Identifier","unusedVar","'Summary' is defined but never used.","'purple' is defined but never used.","'green' is defined but never used.","'useState' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'handleChangeDense' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]