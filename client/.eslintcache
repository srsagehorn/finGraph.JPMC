[{"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/index.js":"1","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/reportWebVitals.js":"2","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/App.js":"3","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/contexts/StockInfoContext.js":"4","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/firebase/userContext.js":"5","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/summary/index.js":"6","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/login/index.js":"7","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/portfolio/index.js":"8","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/reducers/stockInfoReducer.js":"9","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/firebase/index.js":"10","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/search/index.js":"11","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/themes/theme.js":"12","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/nav/index.js":"13","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/PortfolioTable/index.js":"14","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/loginform/index.js":"15","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/StockInfo/index.js":"16","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/utilities/StringFormatter.js":"17","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/search/index.js":"18","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/Search/index.js":"19","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/StockButton/index.js":"20"},{"size":500,"mtime":1610646844888,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1610646844941,"results":"23","hashOfConfig":"22"},{"size":1132,"mtime":1610648808340,"results":"24","hashOfConfig":"22"},{"size":621,"mtime":1610650035483,"results":"25","hashOfConfig":"22"},{"size":539,"mtime":1610646844883,"results":"26","hashOfConfig":"22"},{"size":321,"mtime":1610646844938,"results":"27","hashOfConfig":"22"},{"size":259,"mtime":1610646844889,"results":"28","hashOfConfig":"22"},{"size":425,"mtime":1610646844890,"results":"29","hashOfConfig":"22"},{"size":776,"mtime":1610653303585,"results":"30","hashOfConfig":"22"},{"size":490,"mtime":1610646844882,"results":"31","hashOfConfig":"22"},{"size":1334,"mtime":1610646844890,"results":"32","hashOfConfig":"22"},{"size":586,"mtime":1610646844945,"results":"33","hashOfConfig":"22"},{"size":1091,"mtime":1610649672887,"results":"34","hashOfConfig":"22"},{"size":18731,"mtime":1610646844878,"results":"35","hashOfConfig":"22"},{"size":4462,"mtime":1610646844884,"results":"36","hashOfConfig":"22"},{"size":3739,"mtime":1610646844881,"results":"37","hashOfConfig":"22"},{"size":269,"mtime":1610646844946,"results":"38","hashOfConfig":"22"},{"size":4607,"mtime":1610470570581,"results":"39","hashOfConfig":"22"},{"size":5148,"mtime":1610648515236,"results":"40","hashOfConfig":"22"},{"size":3545,"mtime":1610655041403,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1n6guq5",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/index.js",[],["89","90"],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/reportWebVitals.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/App.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/contexts/StockInfoContext.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/firebase/userContext.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/summary/index.js",["91"],"import React from 'react'\nimport Summary from \"../../components/PortfolioTable\"\nimport Nav from '../../components/nav'\nimport PortfolioTable from '../../components/PortfolioTable'\n\nexport default function SummaryPage() {\n    return (\n        <div>\n            <Nav />\n            <PortfolioTable />\n        </div>\n    )\n}","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/login/index.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/portfolio/index.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/reducers/stockInfoReducer.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/firebase/index.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/pages/search/index.js",["92"],"import React, { useContext } from 'react'\nimport Search from \"../../components/Search\"\nimport Nav from '../../components/nav'\nimport StockInfo from \"../../components/StockInfo\"\nimport StockButton from \"../../components/StockButton\"\nimport { StockInfoContext } from '../../contexts/StockInfoContext'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport theme from \"../../themes/theme\"\n\nconst useStyles = makeStyles((theme) => ({\n   loader: {\n        color:\"rgba(21,244,238)\",\n        margin: \"30px\"\n    }\n}));\n\n\nexport default function SearchPage() {\n    const classes = useStyles();\n    const [stockInfo, dispatchStockInfo] = useContext(StockInfoContext)\n  \n    return (\n        <div>\n            <ThemeProvider theme={theme}> \n            <Nav />\n            \n            <Search />\n            <StockButton/>\n            {stockInfo.isLoading ?\n\n                <Grid container justify=\"center\">\n                    <Grid item>\n                        <CircularProgress size={50} className={classes.loader}/>\n                    </Grid>\n                </Grid>\n                :\n                <StockInfo />\n            }\n</ThemeProvider>\n        </div>\n    )\n}\n","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/themes/theme.js",["93","94","95"],"import { createMuiTheme, rgbToHex } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\n\n\n\nconst theme = createMuiTheme({\n \n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: 'rgb(7, 202, 231)'\n    },\n      background: {\n        paper: \"rgba(40,40,40, 0.5)\",\n        default: \"rgba(20,20,20)\"\n      },\n      type: \"dark\",\n      divider:\"rgba(0,144,138, 0.1)\",\n      action:{\n        selected: 'rgba(50,50,50)'\n      }\n  },\n});\n\nexport default theme","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/nav/index.js",["96"],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/PortfolioTable/index.js",["97","98"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { useForm } from 'react-hook-form';\nimport { removeHyphenAddDot } from \"../../utilities/StringFormatter\"\nimport EditIcon from '@material-ui/icons/Edit';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nfunction createData(name, symbol, dateAdded, prevSharePrice, currSharePrice, change) {\n    let percentChange = (change / prevSharePrice) * 100\n    percentChange = (Math.round(percentChange * 100) / 100).toFixed(2);\n    return { name, symbol, dateAdded, prevSharePrice, currSharePrice, change, percentChange };\n}\n\nconst rows = [\n    createData(\"Royal Dutch Shell\", \"RDS-B\", \"1/01/2020\", 38.70, 38.17, -0.53),\n    createData(\"British American Tobacco\", \"BTI\", \"1/03/2020\", 37.50, 37.70, 0.20),\n    createData('Apple', \"AAPL\", \"1/05/2020\", 125.00, 129.85, 4.85),\n    createData('Apple2', \"APL\", \"1/05/2020\", 125.00, 129.85, 4.85),\n];\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// company, symbol, dateAdded, prevSharePrice, currSharePrice, change\nconst headCells = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'Company' },\n    { id: 'symbol', numeric: true, disablePadding: false, label: 'Symbol' },\n    { id: 'dateAdded', numeric: true, disablePadding: false, label: 'Date Added' },\n    { id: 'prevSharePrice', numeric: true, disablePadding: false, label: 'Previous Price' },\n    { id: 'currSharePrice', numeric: true, disablePadding: false, label: 'Current Price' },\n    { id: 'change', numeric: true, disablePadding: false, label: 'Change' },\n    { id: 'percentChange', numeric: true, disablePadding: false, label: '% Change' }\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, deleteMode, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    {deleteMode && (\n                        <Checkbox\n                            indeterminate={numSelected > 0 && numSelected < rowCount}\n                            checked={rowCount > 0 && numSelected === rowCount}\n                            onChange={onSelectAllClick}\n                            inputProps={{ 'aria-label': 'Select All Stocks' }}\n                        />\n\n                    )}\n                </TableCell>\n\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: props.deleteMode,\n            })}\n        >\n            \n            {props.deleteMode &&\n            <Tooltip title=\"Cancel\" >\n                <IconButton aria-label=\"cancel\"\n                onClick={props.onDeleteModeClick}>\n                    <CancelIcon />\n                </IconButton>\n            </Tooltip>\n            \n            }\n\n            {props.deleteMode ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                    <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                        Stocks\n                    </Typography>\n                )}\n\n            {(props.deleteMode) ? (\n                <>\n                    <Tooltip title=\"Delete\">\n                        <IconButton aria-label=\"delete\" type=\"submit\">\n                            <DeleteIcon />\n                        </IconButton>\n                    </Tooltip>\n\n                </>\n            ) : (\n                    <Tooltip title=\"Edit list\">\n                        <IconButton\n                            aria-label=\"edit list\"\n                            onClick={props.onDeleteModeClick}>\n                            < EditIcon />\n                        </IconButton>\n                    </Tooltip>\n                )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        color: \"white\",\n        width: '100%',\n    },\n    paper: {\n        color: \"white\",\n        width: '95%',\n        marginBottom: theme.spacing(2),\n        border: \"5px solid rgba(21,244,238, 0.2)\",\n        maxWidth: \"100%\",\n        margin: \"0 auto\"\n    },\n    table: {\n        minWidth: 750,\n\n    },\n    tableRow: {\n\n    },\n    tableCellPositive: {\n\n        color: \"rgb(57,255,20)\"\n    },\n\n    tableCellNegative: {\n        color: \"rgb(255, 7, 58)\"\n    },\n\n    boxNegative: {\n        backgroundColor: \"rgba(130,120,120, 0.20)\",\n        display: \"inline-block\",\n        borderRadius: \"2px\",\n        padding: \"0.2rem 0.8rem\"\n    },\n\n    boxPositive: {\n        backgroundColor: \"rgba(130,130,130, 0.20)\",\n        display: \"inline-block\",\n        borderRadius: \"2px\",\n        padding: \"0.2rem 0.8rem\"\n    },\n\n    boxNeutral: {\n        backgroundColor: \"rgba(100,100,100, 0.2)\",\n        display: \"inline-block\",\n        borderRadius: \"2px\",\n        padding: \"0.2rem 0.8rem\"\n    },\n\n\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function PortfolioTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('name');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [deleteMode, setDeleteMode] = React.useState(false);\n\n    //Code needed for react hook form\n    const { handleSubmit, register } = useForm();\n    const onSubmit = handleSubmit((data) => {\n        // data.filter((obj)=>{\n        //     obj.value === false\n        // })\n        let symbolsForDeleting = []\n        Object.keys(data).forEach(key => {\n            if (data[key] === true) {\n                symbolsForDeleting.push(key)\n            };\n        });\n        symbolsForDeleting = removeHyphenAddDot(symbolsForDeleting)\n        console.log(symbolsForDeleting)\n        console.log(data)\n    });\n\n    const handleRequestSort = (event, property) => {\n\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n\n        if (event.target.checked) {\n            const newSelectedIds = rows.map((n) => n.symbol);\n            setSelected(newSelectedIds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleDeleteMode = (event) => {\n        setDeleteMode(!deleteMode)\n        setSelected([])\n    };\n\n\n    //conditional logic to render the color of the text\n    const renderTextColor = (value) => {\n        if (value > 0) {\n            return classes.tableCellPositive\n        } else if (value < 0) {\n            return classes.tableCellNegative\n        } else {\n            return\n        }\n    }\n\n    const renderBoxColor = (value) => {\n        if (value > 0) {\n            return classes.boxPositive\n        } else if (value < 0) {\n            return classes.boxNegative\n        } else {\n            return classes.boxNeutral\n        }\n    }\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={onSubmit}>\n                <Paper className={classes.paper}>\n                    <EnhancedTableToolbar numSelected={selected.length} onDeleteModeClick={handleDeleteMode} deleteMode={deleteMode} />\n                    <TableContainer>\n                        <Table\n                            className={classes.table}\n                            aria-labelledby=\"tableTitle\"\n                            size={dense ? 'small' : 'medium'}\n                            aria-label=\"enhanced table\"\n                        >\n                            <EnhancedTableHead\n                                classes={classes}\n                                numSelected={selected.length}\n                                order={order}\n                                orderBy={orderBy}\n                                onSelectAllClick={handleSelectAllClick}\n                                onRequestSort={handleRequestSort}\n                                rowCount={rows.length}\n                                deleteMode={deleteMode}\n\n                            />\n                            <TableBody>\n                                {stableSort(rows, getComparator(order, orderBy))\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map((row, index) => {\n                                        const isItemSelected = isSelected(row.symbol);\n                                        const labelId = `enhanced-table-checkbox-${index}`;\n\n                                        return (\n                                            <TableRow\n                                                hover\n                                                onClick={(event) => handleClick(event, row.symbol)}\n                                                role=\"checkbox\"\n                                                aria-checked={isItemSelected}\n                                                tabIndex={-1}\n                                                key={row.symbol}\n                                                selected={isItemSelected}\n                                                className={classes.tableRow}\n\n                                            >\n\n                                                <TableCell padding=\"checkbox\">\n                                                    {deleteMode &&\n                                                        <Checkbox\n                                                            checked={isItemSelected}\n                                                            inputProps={{ 'aria-labelledby': labelId }}\n                                                            //fields needed for react hook form\n                                                            name={row.symbol}\n                                                            inputRef={register}\n                                                        />}\n                                                </TableCell>\n\n\n                                                <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                    {row.name}\n                                                </TableCell>\n                                                <TableCell align=\"right\">{row.symbol}</TableCell>\n                                                <TableCell align=\"right\">{row.dateAdded}</TableCell>\n                                                <TableCell align=\"right\">{row.prevSharePrice}</TableCell>\n                                                <TableCell align=\"right\"\n                                                    className={row.currSharePrice < row.prevSharePrice ? classes.tableCellNegative : classes.tableCellPositive}\n                                                >\n                                                    <Box className={renderBoxColor(row.percentChange)}>\n\n                                                        {row.currSharePrice}\n                                                    </Box>\n                                                </TableCell>\n                                                <TableCell\n                                                    className={renderTextColor(row.change)}\n                                                    align=\"right\">\n                                                    <Box className={renderBoxColor(row.percentChange)}>\n                                                        {row.change}\n                                                    </Box>\n                                                </TableCell>\n                                                <TableCell\n                                                    className={renderTextColor(row.percentChange)}\n                                                    align=\"right\">\n                                                    <Box className={renderBoxColor(row.percentChange)}>\n                                                        {row.percentChange < 0 ? `${row.percentChange}` : `+${row.percentChange}`}\n\n                                                    </Box>\n\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                {emptyRows > 0 && (\n                                    <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                        <TableCell colSpan={8} />\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={rows.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </form>\n        </div>\n    );\n}","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/loginform/index.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/StockInfo/index.js",["99","100"],"import React, { useState, useContext } from 'react'\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { StockInfoContext } from '../../contexts/StockInfoContext'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    darkCardBackground:{\n        backgroundColor:\"rgb(50,50,50)\"\n    }\n}));\n\nexport default function StockInfo() {    \n    const classes = useStyles();\n    const [stockInfo, dispatchStockInfo] = useContext(StockInfoContext)\n    return (\n        <Box m={1}>\n\n            <Grid container spacing={4}>\n                {/* <Grid item sm={12}>\n                    <Card>\n                        <CardContent>\n                            <Typography>\n                                Stock Chart\n                    </Typography>\n                        </CardContent>\n                    </Card>\n\n                </Grid> */}\n                <Grid item container spacing={3} justify=\"center\" alignItems=\"stretch\" sm={12}>\n\n                    <Grid item sm={6} >\n                        <Card className={classes.darkCardBackground}>\n\n\n\n                            {stockInfo.targetPrice ?\n                                <Grid container spacing ={3}>\n                                    <Grid item>\n                                    <Card>\n                                        <CardContent>\n                                        {`Last Updated: ${stockInfo.targetPrice.lastUpdated}`}\n                                        </CardContent>\n                                    </Card>\n\n                                    </Grid>\n                                    <Grid item>\n                                    <Card>\n                                    <CardContent>\n                                        {`symbol: ${stockInfo.targetPrice.symbol}`}\n                                        </CardContent>\n                                    </Card>\n                                    </Grid>\n                                    <Grid item>\n                                    <Card>\n                                    <CardContent>\n                                        {`Target High: ${stockInfo.targetPrice.targetHigh}`}\n                                        </CardContent>\n                                    </Card>\n                                    </Grid>\n                                    <Grid item>\n                                    <Card>\n                                    <CardContent>\n                                        {`Target Low: ${stockInfo.targetPrice.targetLow}`}\n                                        </CardContent>\n                                    </Card>\n\n                                    </Grid>\n                                </Grid>\n\n                                : <Typography>\"No Description Available\"</Typography>}\n\n\n                        </Card>\n                    </Grid>\n                    <Grid item sm={6}>\n                        <Card>\n                            <CardContent>\n                                <Typography>\n                                    {/* if there is stock info and a stock summary then show the stock summary description */}\n\n                                    {stockInfo.stockSummary.Description ? stockInfo.stockSummary.Description : \"No Description Available\"}\n\n                                </Typography>\n                            </CardContent>\n\n                        </Card>\n                    </Grid>\n\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/utilities/StringFormatter.js",[],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/search/index.js",["101"],"/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/Search/index.js",["102"],"import React, { useState, useContext } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { matchSorter } from 'match-sorter';\nimport { useForm } from 'react-hook-form';\nimport {StockInfoContext} from '../../contexts/StockInfoContext'\n\n//Material UI built in way of custom styling\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        margin: theme.spacing(2)\n    },\n    option: {\n        backgroundColor: theme.palette.background.default, \n        \"&:hover\": {\n            backgroundColor: theme.palette.action.selected\n          }\n      },\n\n    \n}));\n\n//Necessary for fuzzy matching with match-sorter\nconst filterOptions = (options, { inputValue }) =>\n    matchSorter(options, inputValue);\n\nexport default function Search() {\n    const classes = useStyles();\n    //autcomplete search ticker options\n    const [tickerOptions, setTickerOptions] = useState([])\n    //React-Hook-Form\n    const { handleSubmit, register } = useForm();\n\n    const [stockInfo, dispatchStockInfo] = useContext(StockInfoContext)\n\n    const onSubmit = handleSubmit(async (data) => {\n        //get rid of hyphen and isolate ticker symbol in string\n        if (data.symbol.indexOf(\"-\") !== -1) {\n            var array = data.symbol.split(\"-\");\n            data.symbol = array[0].trim().toLowerCase();\n        }\n        dispatchStockInfo({type:'API_FETCH_INIT'})\n       \n\n        try{\n            const stockSummary = await axios.get(`https://www.alphavantage.co/query?function=OVERVIEW&symbol=${data.symbol}&apikey=${process.env.REACT_APP_ALPHA_VANTAGE_API_KEY}`);\n            await console.log(`test ${stockSummary}`)\n\n            const targetPrice = await axios.get(`https://finnhub.io/api/v1/stock/price-target?symbol=${data.symbol}&token=${process.env.REACT_APP_FINNHUB_API_KEY}`);\n            await console.log(targetPrice)\n\n            const stockPrice = await axios.get(`https://finnhub.io/api/v1/stock/price-target?symbol=${data.symbol}&token=${process.env.REACT_APP_FINNHUB_API_KEY}`);\n            await console.log(stockPrice)\n\n            await setTimeout(function(){\n                dispatchStockInfo(\n                    {type:'API_FETCH_SUCCESS',\n                    payload:{\n                        targetPrice: {\n                            ...targetPrice.data\n                        },\n                        stockSummary:{\n                            ...stockSummary.data\n                        }\n                    }\n                }\n            )\n           }, 2000)\n\n        } catch(error){\n            console.log(\"error fetching stock data\") \n            dispatchStockInfo({type:'API_FETCH_FAILURE'})\n        }\n\n    });\n\n    const handleChange = async (value) => {\n        if (value) {\n            try {\n                const response = await axios.get(\n                    //List of Tickers(2019) https://github.com/yashwanth2804/TickerSymbol\n                    `https://ticker-2e1ica8b9.now.sh/keyword/${value}`\n                );\n                console.log(response)\n                setTickerOptions(response.data)\n            } catch (error) {\n                console.log(\"autocomplete not working at the moment\")\n            }\n        }\n\n    }\n\n\n    return (\n        <div>\n\n            <Grid container justify=\"center\">\n                <Grid item xs={6} >\n                    <Card>\n                        <form onSubmit={onSubmit}>\n                            <Autocomplete\n                    classes={{\n                        option: classes.option, \n                       \n                    }}\n                                type=\"submit\"\n                                //filter option used for fuzzy matching with match-sorter, see MU docs on autocomplete\n                                filterOptions={filterOptions}\n                                id=\"ticker-symbol-request\"\n                                freeSolo\n                                className={classes.input}\n                                onInputChange={(event, newInputValue) => {\n                                    handleChange(newInputValue)\n                                }}\n                                options={tickerOptions.map((option) => `${option.symbol}  -  ${option.name.length < 35 ? option.name : option.name.substring(0, 35) + \"...\"}`)}\n                                \n                                renderInput={(params) => (\n                                    <TextField {...params}\n                                        label=\"Search Ticker Symbol\"\n                                        inputRef={register}\n                                        name=\"symbol\"\n                                        size={\"small\"}\n                                        variant=\"outlined\" />\n                                )}\n                            />\n                        </form>\n                    </Card>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n","/Users/matiastong/Documents/repos/finGraph.JPMC/client/src/components/StockButton/index.js",["103","104","105","106","107","108","109"],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":15},{"ruleId":"114","severity":1,"message":"118","line":23,"column":23,"nodeType":"116","messageId":"117","endLine":23,"endColumn":40},{"ruleId":"114","severity":1,"message":"119","line":1,"column":26,"nodeType":"116","messageId":"117","endLine":1,"endColumn":34},{"ruleId":"114","severity":1,"message":"120","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":14},{"ruleId":"114","severity":1,"message":"121","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":13},{"ruleId":"122","severity":1,"message":"123","line":24,"column":51,"nodeType":"124","endLine":24,"endColumn":65},{"ruleId":"114","severity":1,"message":"125","line":21,"column":8,"nodeType":"116","messageId":"117","endLine":21,"endColumn":22},{"ruleId":"114","severity":1,"message":"126","line":281,"column":19,"nodeType":"116","messageId":"117","endLine":281,"endColumn":27},{"ruleId":"114","severity":1,"message":"127","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"118","line":18,"column":23,"nodeType":"116","messageId":"117","endLine":18,"endColumn":40},{"ruleId":"114","severity":1,"message":"128","line":30,"column":12,"nodeType":"116","messageId":"117","endLine":30,"endColumn":21},{"ruleId":"114","severity":1,"message":"128","line":38,"column":12,"nodeType":"116","messageId":"117","endLine":38,"endColumn":21},{"ruleId":"114","severity":1,"message":"129","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":13},{"ruleId":"114","severity":1,"message":"130","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":12},{"ruleId":"114","severity":1,"message":"131","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":11},{"ruleId":"114","severity":1,"message":"132","line":7,"column":8,"nodeType":"116","messageId":"117","endLine":7,"endColumn":19},{"ruleId":"114","severity":1,"message":"133","line":25,"column":11,"nodeType":"116","messageId":"117","endLine":25,"endColumn":18},{"ruleId":"114","severity":1,"message":"118","line":27,"column":23,"nodeType":"116","messageId":"117","endLine":27,"endColumn":40},{"ruleId":"114","severity":1,"message":"134","line":50,"column":15,"nodeType":"116","messageId":"117","endLine":50,"endColumn":23},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'Summary' is defined but never used.","Identifier","unusedVar","'dispatchStockInfo' is assigned a value but never used.","'rgbToHex' is defined but never used.","'purple' is defined but never used.","'green' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'FilterListIcon' is defined but never used.","'setDense' is assigned a value but never used.","'useState' is defined but never used.","'stockInfo' is assigned a value but never used.","'Paper' is defined but never used.","'Card' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'classes' is assigned a value but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]